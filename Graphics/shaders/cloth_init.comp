#version 460
//#extension GL_KHR_vulkan_glsl : enable
#extension GL_EXT_shader_atomic_float : enable

struct ClothVertex
{
	vec4 position;
	vec4 color;
};

struct Spring
{
	uint p1;
	uint p2;
	float restLength;
	// float stiffness;
};

layout (local_size_x = 16, local_size_y = 16) in;

layout (binding = 0) buffer ClothVertices
{
	ClothVertex vertices[];
};

layout (binding = 1) buffer Springs
{
	Spring springs[];
};

layout (binding = 2) buffer Velocities
{
	vec4 velocities[];
};

layout (binding = 3) buffer Accelerations
{
	vec4 accelerations[];
};

layout (push_constant) uniform PushConstants
{
	uvec2 dim;
	uint  numSprings;
	float time;
	float deltaTime;
	float kElastic;
	float kDamping;
} pc;

uvec3 GlobalDim;
uint GlobalInvocationIndex;

void main()
{
	uint x = gl_GlobalInvocationID.x;
	uint y = gl_GlobalInvocationID.y;
	GlobalDim = gl_NumWorkGroups * gl_WorkGroupSize;
	GlobalInvocationIndex = (gl_GlobalInvocationID.z * GlobalDim.y * GlobalDim.x) + (gl_GlobalInvocationID.y * GlobalDim.x) + gl_GlobalInvocationID.x;
	
	uint springIndex = GlobalInvocationIndex;
	uint vertexIndex = GlobalInvocationIndex;
	
	if (vertexIndex < pc.dim.x * pc.dim.y)
	{
		vec3 e1 = vertices[vertexIndex + 1].position.xyz - vertices[vertexIndex].position.xyz;
		vec3 e2 = vertices[vertexIndex + pc.dim.x].position.xyz - vertices[vertexIndex].position.xyz;
		vec3 normal = normalize(cross(e1, e2));

		vec3 wind = vec3(0, 0, 7.5);
		vec3 windForce = wind * abs(dot(normal, wind)) / length(wind);

		accelerations[vertexIndex].xyz = vec3(0.0, -9.8, 0) + windForce;
		//accelerations[vertexIndex].xyz = vec3(0.0, -9.8, 0);
	}
}